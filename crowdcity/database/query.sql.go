// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package crowdcity

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO users (username, email, password)
VALUES (?, ?, ?)
`

type CreateAuthorParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.Username, arg.Email, arg.Password)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE
FROM users
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, username, email, password
FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAuthorData = `-- name: GetAuthorData :one
SELECT id, username, password
FROM users
WHERE username = ? LIMit 1
`

type GetAuthorDataRow struct {
	ID       int32
	Username string
	Password string
}

func (q *Queries) GetAuthorData(ctx context.Context, username string) (GetAuthorDataRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthorData, username)
	var i GetAuthorDataRow
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, username, email, password
FROM users
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
